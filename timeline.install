<?php
// $Id$

/**
 * @file
 * Install file for Node timeline module.
 *
 * The definition of the fields for the module is here,
 *
 * See @link http://drupal.org/node/707832 Field API Tutorial @endlink
 *
 * See @link http://drupal.org/node/443536 Field API Handbook Page @endlink
 *
 * See @link field Field API documentation @endlink
 *
 */

/**
 * Implements hook_install().
 *
 * - Add the body field.
 * - Configure the body field.
 * - Create color, quantity, and image fields.
 * - Create color, quantity, and image instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 */
function timeline_install() {
  // use get_t() to get the name of our localization function for translation
  // during install, when t() is not available.
  $t = get_t();

  // Define the node type.
  $archive = array(
    'type' => 'archive',
    'name' => $t('Timeline Archive'),
    'base' => 'node_content',
    'description' => $t('This is an archive for which images will be collected'),
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($archive);

  // Save the content type
  node_type_save($content_type);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_timeline_archive_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_timeline_archive_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $archive['type'];
    field_create_instance($instance);
  }

  timeline_update_7001();
}

/**
 * Return a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * node_timeline_install() and node_timeline_uninstall().
 */
function _timeline_archive_installed_fields() {
  return array(
    'archive_url' => array(
      'field_name'   => 'archive_url',
      'type'         => 'text',
      'settings'     => array(
        'max_length'   => 255,
      ),
    ),
    'archive_frequency' => array(
      'field_name'        => 'archive_frequency',
      'type'              => 'taxonomy_term_reference',
      'settings'          => array(
        'allowed_values'    => array(
          array(
            'vocabulary'      => 'timeline_frequencies',
            'parent'          => 0
          ),
        ),
      ),
    ),
    'archive_base_time' => array(
      'field_name'        => 'archive_base_time',
      'type'              => 'datestamp',
    ),
    'preview_picture' => array(
      'field_name' => 'preview_picture',
      'type'       => 'image',
    ),
  );
}


/**
 * Return a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_timeline_list" view mode.  
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _timeline_archive_installed_instances() {
  $t = get_t();
  return array(
    'archive_url' => array(
      'field_name'   => 'archive_url',
      'label'        => $t('URL'),
      'description'  => $t('The URL of the image to be downloaded. Normally ending with .jpg, .jpeg or .png.'),
      'type'         => 'text',
      'required'     => true,
      'widget'       => array(
        'type'         => 'text_timeline_url',
      ),
    ),
    'archive_frequency' => array(
      'field_name'   => 'archive_frequency',
      'entity_type'  => 'node',
      'label'        => $t('Interval'),
      'description'  => $t('In this Interval Images will be downloaded.'),
      'required'     => true,
      'widget'       => array(
        'type'         => 'options_select',
        'module'       => 'options',
      ),
      'display' => array(
        'default' => array('type' => 'hidden'),
        'teaser' => array('type' => 'hidden')
      ),
    ),
    'archive_basetime' => array(
      'field_name'   => 'archive_basetime',
      'label'        => $t('Basetime'),
      'description'  => 'The basetime is the time you want your pictures to be taken. It is used in low-frequency archives do determine the time of the picture. E.g. If in a daily archive the pictures should be taken midnight, morning or noon.',
      'type'         => 'datetime',
      'required'     => true,
      'widget'       => array(
        'type'         => 'date_popup',
      ),
    ),
    'preview_picture' => array(
      'field_name'   => 'preview_picture',
      'label'        => $t('Preview Picture'),
      'type'         => 'image',
      'widget'       => array(
        'type'         => 'image_upload',
      ),
    ),
  );
}

function _timeline_frequencies_installed_fields() {
  $t = get_t();
  return array(
    'timeline_frequency_seconds' => array(
      'field_name'   => 'timeline_frequency_seconds',
      'type'         => 'number_integer',
    ),
  );
}


function _timeline_frequencies_installed_instances() {
  $t = get_t();
  return array(
    'timeline_frequency_seconds' => array(
      'field_name'   => 'timeline_frequency_seconds',
      'label'        => $t('Frequency in seconds'),
      'type'         => 'number_integer',
      'required'     => true,
      'widget'       => array(
        'type'         => 'number',
      ),
    ),
  );
}

function _timeline_default_frequencies() {
  return array(
    array(
      'text'    => '5 minutes',
      'seconds' => 300,
    ),
    array(
      'text'    => '1 hour',
      'seconds' => 3600,
    ),
    array(
      'text'    => '1 day',
      'seconds' => 86400,
    ),
  );
}
/**
 * Implements hook_uninstall().
 *
 */
function timeline_uninstall() {
  // Gather all the timeline content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'archive'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_timeline_archive_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_timeline
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'archive');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('archive');

  foreach (array_keys(_timeline_frequencies_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Delete all fields from the frequencies vocabulary
  // ToDo: Doesn't work, for whatever reason
  $instances = field_info_instances('taxonomy_term', 'timeline_frequencies');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  taxonomy_vocabulary_delete(variable_get('timeline_freq_vocabulary', 0));
  variable_del('timeline_freq_vocabulary');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/*
 *
 */

function timeline_schema() {
  $schema['records'] = array(
    'description' => 'All our records.',
    'fields' => array(
      'rid' => array(
        'description' => 'The primary identifier for a record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The {node}.nid of the archive this image belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'fid' => array(
        'description' => 'The {file_managed}.fid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'request_time' => array(
        'description' => 'The time the download was requested.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'saved_time' => array(
        'description' => 'The time the image was saved on the system.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'error' => array(
        'description' => 'Contains an error code. Either http or -1 in case of not connected. 200 - 206 is ok.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'record_requested' => array('request_time'),
      'record_nid' => array('nid'),
    ),
    'unique keys' => array(
      'nid_request_time' => array('nid', 'request_time'),
    ),
    'foreign keys' => array(
      'file_managed' => array(
        'table' => 'file_managed',
        'columns' => array('fid' => 'fid'),
      ),
      'nid' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
    'primary key' => array('rid'),
  );
  return $schema;
}

/*
 *
 */

function timeline_update_7001() {
  $t = get_t();
  $vocabulary = taxonomy_vocabulary_load(variable_get('timeline_freq_vocabulary', 0));
  if (!$vocabulary) {
    $edit = array(
      'name' => t('Frequencies'),
      'machine_name' => 'timeline_frequencies',
      'description' => t('The available frequencies for the image collector.'),
      'hierarchy' => 1,
      'module' => 'timeline',
      'weight' => -10,
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
    variable_set('timeline_freq_vocabulary', $vocabulary->vid);
  
    foreach (_timeline_frequencies_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    // http://api.drupal.org/api/function/field_create_instance/7
    foreach (_timeline_frequencies_installed_instances() as $instance) {
      $instance['entity_type'] = 'taxonomy_term';
      $instance['bundle'] = $vocabulary->machine_name;
      field_create_instance($instance);
    }

    foreach (_timeline_default_frequencies() as $freqency) {
      $edit = array(
        'name' => $t($freqency['text']),
        'description' => '',
        'parent' => array(0),
        'vid' => $vocabulary->vid,
        'timeline_frequency_seconds' => array(
          'und' => array(
            0 => $frequency['seconds'],
          ),
        ),
      );
      $term = (object) $edit;
      taxonomy_term_save($term);
    }
  }
}

/*
 * Timeline: Create Basetime Field
 */

function timeline_update_7003() {
  field_create_field(array(
      'field_name'   => 'archive_basetime',
      'label'        => t('Basetime'),
      'description'  => 'The basetime is the time you want your pictures to be taken. It is used in low-frequency archives do determine the time of the picture. E.g. If in a daily archive the pictures should be taken midnight, morning or noon.',
      'type'         => 'datetime',
      'required'     => true,
      'widget'       => array(
        'type'         => 'date_popup',
      ),
    ));

  field_create_instance(array(
      'field_name'   => 'archive_basetime',
      'label'        => t('Basetime'),
      'description'  => 'The basetime is the time you want your pictures to be taken. It is used in low-frequency archives do determine the time of the picture. E.g. If in a daily archive the pictures should be taken midnight, morning or noon.',
      'type'         => 'datetime',
      'required'     => true,
      'widget'       => array(
        'type'         => 'date_popup',
      ),
      'entity_type'  => 'node',
      'bundle'       => 'archive',
    ));
}