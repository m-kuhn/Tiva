<?php
// $Id$

/*
 * Implements hook_menu
 *
 * Grab the path node/add/animation/%, so we can link directly from archive
 * pages to a form where this archive already is selected.
 *
 */
function timeline_animation_menu() {
  $items['node/add/animation/%'] = array(
    'title' => 'Timeline Animation',
    'title callback' => 'check_plain',
    'page callback' => 'animation_add',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'animation'),
    'description' => 'Create a new animation',
    'file' => 'timeline_animation.pages.inc',
  );
  
  return $items;
}

/*
 * Implements hook_node_insert
 *
 * In case of a new animation, add it to the queue, so it will be created by the
 * next cron run.
 *
 */

function timeline_animation_node_insert($node) {

  if ($node->type == 'animation') {
    $queue = DrupalQueue::get('animations_queue');
    $queue->deleteQueue();
    $queue->createQueue();  // There is no harm in trying to recreate existing.

    $queue->createItem($node->nid);
    
    timeline_animation_cron();
  }
}

/*
 * Implements hook_cron
 *
 * Create queued animations
 *
 */

function timeline_animation_cron() {
  module_load_include('inc', 'timeline_animation', 'include/video_ffmpeg');

  $queue = DrupalQueue::get('animations_queue');
  $queue->createQueue();  // There is no harm in trying to recreate existing.

  while ($item = $queue->claimItem(3600)) // claim the item for 60 minutes
  {
    // Get all required images
    $animation = node_load($item->data);

    if (!$animation) {
      // has been deleted??
      $queue->deleteItem($item);
      continue;
    }

    $result = db_query("
      SELECT f.uri
      FROM {records} r
      LEFT JOIN {file_managed} f
        ON f.fid = r.fid
      WHERE FLOOR(r.request_time / :frequency) * :frequency % :interval = 0
      AND r.request_time > :start_time
      AND r.request_time < :end_time
      ", array(
        ':frequency'  => 300,
        ':interval'   => 300 * $animation->timeline_animation_interval['und'][0]['value'],
        ':start_time' => $animation->timeline_animation_start['und'][0]['value'],
        ':end_time'   => $animation->timeline_animation_end['und'][0]['value'],
      ))
    ->fetchAssoc();

    if(!$result) {
      // No frames? Delete the node.
      // ToDo:
      node_delete($animation->nid);
      $queue->deleteItem($item);
      continue;
    }

    // Do symlinking...
    $temppath = file_directory_temp() . '/animation/' . $animation->nid;
    file_prepare_directory($temppath, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $temppath .= '/';

    $i = 0;
    $image_info = false;
    foreach ($result as $record) {
      // ToDo: Handle missing frames
      // ToDo: Adjust file extension according to original files
      $link = sprintf("frame%04d.jpg", $i++);
      symlink(drupal_realpath($result['uri']), $temppath . $link);
      if (!$image_info) {
        $image_info = image_get_info($result['uri']);
      }
    }

    // Load the first image to determine extensions
    // ToDo: Check it is an image...
    $dimensions = "{$image_info['width']}x{$image_info['height']}";

    // Convert video
    $directory = 'public://timeline/animations/' . $animation->nid;
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

    $converted = file_create_filename("animation{$animation->nid}.mp4", $directory);
    
    $ffmpeg = new FfmpegVideo();
    $output = $ffmpeg->convert_video("{$temppath}frame%04d.jpg", drupal_realpath($converted), $dimensions);
    drupal_unlink($temppath);

    watchdog('timeline_animation', 'Created animation for @item. Output: @output', array('@string' => $item->data, '@output' => $output));

    // save the file...
    // ToDo: Check if the command was successful
    $file = new stdClass();
    $file->uri      = $converted;
    $file->filename = basename($converted);
    $file->filemime = file_get_mimetype($converted);
    $file->uid      = $animation->uid;
    $file->display  = 0;

    $file = file_save($file);

    $animation->timeline_animation_animation['und'][0] = (array)$file;
    node_save($animation);
    
    $queue->deleteItem($item);
  }
}

?>