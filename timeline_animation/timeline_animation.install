<?php
// $Id$

/**
 * @file
 * Install file for Node timeline module.
 *
 * The definition of the fields for the module is here,
 *
 * See @link http://drupal.org/node/707832 Field API Tutorial @endlink
 *
 * See @link http://drupal.org/node/443536 Field API Handbook Page @endlink
 *
 * See @link field Field API documentation @endlink
 *
 */

/**
 * Implements hook_install().
 *
 * - Add the body field.
 * - Configure the body field.
 * - Create color, quantity, and image fields.
 * - Create color, quantity, and image instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 */
function timeline_animation_install() {
  // use get_t() to get the name of our localization function for translation
  // during install, when t() is not available.
  $t = get_t();

  // Define the node type.
  $node_timeline_animation = array(
    'type' => 'animation',
    'name' => $t('Timeline Animation'),
    'base' => 'node_content',
    'description' => $t('This is an animation of an archive'),
    'required' => true,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($node_timeline_animation);

  // Save the content type
  node_type_save($content_type);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_timeline_animation_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_timeline_animation_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_timeline_animation['type'];
    field_create_instance($instance);
  }
}

/**
 * Return a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * node_timeline_install() and node_timeline_uninstall().
 */
function _timeline_animation_installed_fields() {
  $t = get_t();
  return array(
    'timeline_animation_archive' => array(
      'field_name'   => 'timeline_animation_archive',
      'type'         => 'node_reference',
      'settings'     => array(
        'referenceable_types' => array(
          'archive',
        ),
      ),
    ),
    'timeline_animation_start' => array(
      'field_name'   => 'timeline_animation_start',
      'type'         => 'datestamp',
    ),
    'timeline_animation_end' => array(
      'field_name'   => 'timeline_animation_end',
      'type'         => 'datestamp',
    ),
    'timeline_animation_fps' => array(
      'field_name'   => 'timeline_animation_fps',
      'type'         => 'number_decimal',
    ),
    'timeline_animation_interval' => array(
      'field_name'   => 'timeline_animation_interval',
      'type'         => 'number_integer',
    ),
    'timeline_animation_animation' => array(
      'field_name'   => 'timeline_animation_animation',
      'type'         => 'file',
    ),
  );
}

/**
 * Return a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_timeline_list" view mode.  
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _timeline_animation_installed_instances() {
  $t = get_t();
  return array(
    'timeline_animation_archive' => array(
      'field_name'   => 'timeline_animation_archive',
      'label'        => $t('Archive'),
      'type'         => 'node_reference',
      'required'     => true,
      'widget'       => array(
        'type'         => 'options_select',
      ),
    ),
    'timeline_animation_start' => array(
      'field_name'   => 'timeline_animation_start',
      'label'        => $t('Start'),
      'type'         => 'datetime',
      'required'     => true,
      'widget'       => array(
        'type'         => 'date_popup',
      ),
    ),
    'timeline_animation_end' => array(
      'field_name'   => 'timeline_animation_end',
      'label'        => $t('End'),
      'type'         => 'datetime',
      'required'     => true,
      'widget'       => array(
        'type'         => 'date_popup',
      ),
    ),
    'timeline_animation_fps' => array(
      'field_name'   => 'timeline_animation_fps',
      'label'        => $t('FPS'),
      'type'         => 'textfield',
      'required'     => true,
      'widget'       => array(
        'type'         => 'textfield',
      ),
    ),
    'timeline_animation_interval' => array(
      'field_name'   => 'timeline_animation_interval',
      'label'        => $t('Interval'),
      'description'  => $t('Every <i>interval</i>th picture will be used.'),
      'type'         => 'textfield',
      'required'     => true,
      'widget'       => array(
        'type'         => 'textfield',
      ),
    ),
    'timeline_animation_animation' => array(
      'field_name'   => 'timeline_animation_animation',
      'label'        => $t('Animation'),
      'type'         => $t('file'),
      'widget'       => array(
        'type'         => 'timeline_animation',
      ),
    ),
  );
}

/**
 * Implements hook_uninstall().
 *
 */
function timeline_animation_uninstall() {
  // Gather all the timeline content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'animation'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_timeline_animation_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_timeline
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'animation');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('animation');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}
